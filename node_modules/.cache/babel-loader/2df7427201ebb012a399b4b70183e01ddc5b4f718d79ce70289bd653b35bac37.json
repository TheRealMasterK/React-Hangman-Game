{"ast":null,"code":"var _jsxFileName = \"/Users/kylelloyd/Documents/GitHub/Hangman/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport GameHeader from './components/GameHeader';\nimport ImageFigure from './components/ImageFigure';\nimport './App.css';\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Notification from './components/Notification';\nimport Popup from './components/Popup';\nimport { showNotification as show } from './helpers/helpers';\nimport randomWords from 'random-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = randomWords(10);\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\nfunction App() {\n  _s();\n  const [playable, setPlayable] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [wrongLetters, setwrongLetters] = useState([]);\n  const [showNotification, setShowNotification] = useState(false);\n  useEffect(() => {\n    const handleKeydown = event => {\n      const {\n        key,\n        keyCode\n      } = event;\n      if (playable && keyCode >= 65 && keyCode <= 90) {\n        const letter = key.toLowerCase();\n        if (selectedWord.includes(letter)) {\n          if (!correctLetters.includes(letter)) {\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        } else {\n          if (!wrongLetters.includes(letter)) {\n            setwrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeydown);\n    return () => window.removeEventListener('keydown', handleKeydown); //cleans up eventlistener so we only have one running\n  }, [correctLetters, wrongLetters, playable]); //anytime items in array get updated, function is called\n\n  function playAgain() {\n    setPlayable(true);\n\n    //Restore Empty Arrays so we can play again\n    setCorrectLetters([]);\n    setwrongLetters([]);\n    const random = Math.floor(Math.random() * words.length);\n    selectedWord = words[random];\n  }\n\n  //app display, passing required props to components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      playAgain: playAgain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(ImageFigure, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(WrongLetters, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Word, {\n        selectedWord: selectedWord,\n        correctLetters: correctLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      correctLetters: correctLetters,\n      wrongLetters: wrongLetters,\n      selectedWord: selectedWord,\n      setPlayable: setPlayable,\n      playAgain: playAgain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      showNotification: showNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QALVVZFjgFiVnLhBLBQ5SowBfnw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","GameHeader","ImageFigure","WrongLetters","Word","Notification","Popup","showNotification","show","randomWords","words","selectedWord","Math","floor","random","length","App","playable","setPlayable","correctLetters","setCorrectLetters","wrongLetters","setwrongLetters","setShowNotification","handleKeydown","event","key","keyCode","letter","toLowerCase","includes","currentLetters","window","addEventListener","removeEventListener","playAgain"],"sources":["/Users/kylelloyd/Documents/GitHub/Hangman/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport GameHeader from './components/GameHeader'\nimport ImageFigure from './components/ImageFigure'\nimport './App.css'\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Notification from './components/Notification';\nimport Popup from './components/Popup';\nimport {showNotification as show} from './helpers/helpers';\nimport randomWords from 'random-words'\n\n\nconst words = (randomWords(10));\nlet selectedWord = words[Math.floor(Math.random() * words.length)]; \n\nfunction App() {\n  const [playable, setPlayable] = useState(true);\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [wrongLetters, setwrongLetters] = useState([]);\n  const [showNotification, setShowNotification] = useState(false);\n\n\n  useEffect(()=> {\n    const handleKeydown = event => {\n        const { key, keyCode} = event;\n          if (playable && keyCode >= 65 && keyCode <= 90) {\n            const letter = key.toLowerCase();\n            if (selectedWord.includes(letter)) {\n              if (!correctLetters.includes(letter)) {\n                setCorrectLetters(currentLetters => [...currentLetters, letter]);\n      \n              } else {\n                show(setShowNotification);\n              }\n            } else {\n              if (!wrongLetters.includes(letter)) {\n                setwrongLetters(wrongLetters => [...wrongLetters, letter]);\n      \n              } else {\n                show(setShowNotification);\n              }\n            }\n          }\n        }\n        window.addEventListener('keydown', handleKeydown);\n        return()=> window.removeEventListener('keydown', handleKeydown); //cleans up eventlistener so we only have one running\n      }, [correctLetters, wrongLetters, playable]); //anytime items in array get updated, function is called\n\n      function playAgain() {\n        setPlayable(true);\n\n      //Restore Empty Arrays so we can play again\n      setCorrectLetters([]);\n      setwrongLetters([]);\n\n      const random = Math.floor(Math.random() * words.length);\n      selectedWord = words[random];\n      }\n\n      \n  //app display, passing required props to components\n  return (\n    <div className=\"App\">\n        <GameHeader playAgain={playAgain} />\n        <div className='game-container'>\n            <ImageFigure wrongLetters={wrongLetters} />\n            <WrongLetters wrongLetters={wrongLetters} />\n            <Word selectedWord={selectedWord} correctLetters={correctLetters} />\n        </div>\n            <Popup correctLetters={correctLetters} wrongLetters={wrongLetters} selectedWord={selectedWord} setPlayable={setPlayable} playAgain={playAgain}/>\n            <Notification showNotification={showNotification} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}